{
    "contents" : "library(shinydashboard)\nsource(\"helpers.R\")\nlibrary(ggplot2)\nlibrary(rjson)\nlibrary(riigiteenused)\nlibrary(curl)\nlibrary(data.table)\n\n#andmete sisselaadimine\nandmedLai=riigiteenused::andmedSisse(\"https://www.riigiteenused.ee/api/et/all\")\nandmed=andmedPikaksDT(andmedLai)\nandmed[, ministeerium:=gsub(\"i haldusala\", \"\", andmed[,ministeerium])]\nandmed[, ministeerium:=gsub(\"Riigikantsele\", \"Riigikantselei\", andmed[,ministeerium])]\nandmed[, kanal:=gsub(\"Kliendijuures\", \"Kliendi juures\", andmed[,kanal])]\nandmed[, kanal:=gsub(\"Eiseteenindus\", \"E-iseteenindus\", andmed[,kanal])]\nandmed[, kanal:=gsub(\"Eesti\", \"Eesti.ee\", andmed[,kanal])]\nandmed[, kanal:=gsub(\"Epost\", \"E-post\", andmed[,kanal])]\nandmed[, kanal:=gsub(\"Letiteenus\", \"Teeninduslett\", andmed[,kanal])]\nandmed[, naitaja:=gsub(\"osutamistearv\", \"osutamiste arv\", andmed[,naitaja])]\n\n#loen sisse tõlkefailid (fread aitab encodingu probleeme ennetada)\nkanali_tolked=fread(\"./translations/dictionary_channels.csv\", encoding = \"UTF-8\")\nnaitaja_tolked=fread(\"./translations/dictionary_moodik.csv\", encoding = \"UTF-8\")\nministeerium_tolked=fread(\"./translations/dictionary_ministeeriumid.csv\", encoding = \"UTF-8\")\nasutused_tolked=fread(\"./translations/dictionary_asutused.csv\", encoding = \"UTF-8\")\ntranslation=read.csv(\"./translations/dictionary_ui.csv\", sep=\";\",stringsAsFactors = F)#tõlked interface raami jaoks\n\n#keevitan kanalite, moodikute tõlked juurde, kui siin \"andmed\" ridade\n#arv väheneb, on kuskil keys bugi sees\nandmed=merge(andmed, kanali_tolked, by.x=\"kanal\", by.y=\"key\")\nandmed=merge(andmed, naitaja_tolked, by.x=\"naitaja\", by.y=\"key\")\nandmed=merge(andmed, ministeerium_tolked, by.x=\"ministeerium\", by.y=\"key\")\nandmed=merge(andmed, asutused_tolked, by.x=\"allasutus\", by.y=\"key\")\n\n#kuupäeva ja kellaaja kuvamiseks\nvalues <- reactiveValues() \n\nserver <- function(input, output, session) {\n  #kustutab \"laeb\" teksti, kui andmed on sisse loetud\n  hide(id = \"loading-content\", anim = TRUE, animType = \"fade\")\n  \n  #kuupäeva ja kellaaja kuvamiseks\n  isolate(values$time <- Sys.time())\n  output$time <- renderText({\n    paste(tr(\"Andmed on seisuga\"), as.character(values$time+7200), \"EET\") \n    #liidan, et selleks et shiny server kuvaks Eesti aja järgi\n  })\n  \n  #######KUSTUTAMISEKS vaja andmete rakendusest alla laadimiseks arendamisel\n#       output$downloadData <- downloadHandler(\n#         filename = \"andmed.csv\",\n#         content = function(file) {\n#           write.table(andmed, file, sep=\";\")\n#         }\n#       )\n#       output$downloadData2 <- downloadHandler(\n#         filename = \"andmedLai.csv\",\n#         content = function(file) {\n#           write.table(andmedLai[, 1:9], file, sep=\";\")\n#         }\n#       )\n  #############\n  #funktsioon interface'i tõlkimiseks\n  tr <- function(text){ # translates text into current language\n    translation[translation$key==text,input$keel]\n  }\n  #funktsioon ooteteksti kuvamiseks\n  ooteTekst=function() {\n    progress <- shiny::Progress$new(session, min=0, max=0)\n    on.exit(progress$close())\n    progress$set(message = 'Palun oota / Please wait ...')\n  }\n  \n  ######sidebarmenu\n  #tekst tabi valimiseks\n  output$valiVaade=renderText({\n    #as.character(tr(\"Vali vaade\"))\n    HTML(paste(\"<b>\",as.character(tr(\"Vali vaade\")),\"</b>\"))\n  })\n  output$kylgmenuu <- renderMenu({\n    sidebarMenu(\n      menuItem(tr(\"uldine\"), icon = icon(\"institution\"),tabName = \"uldine\"),\n      menuItem(tr(\"minloikes\"), icon = icon(\"building\"),\n               tabName = \"minloikes\"),\n      menuItem(tr(\"asutloikes\"), icon = icon(\"home\"),tabName = \"asutloikes\"),\n      menuItem(\"Info\", icon = icon(\"info\"),tabName = \"info\")\n    )\n  })\n  \n  ########üldise vaate asjad\n  #ministeeriumite arv üldine\n  output$MinistArv <- renderValueBox({\n    valueBox(\n      paste(paste(length(unique(andmed$ministeerium)))), \n      tr(\"ministeeriumi\"),icon = icon(\"institution\"),color = \"purple\")\n  })\n  #allasutuste arv üldine\n  output$AsutusteArv <- renderValueBox({\n    valueBox(paste(length(unique(andmed$allasutus))), \n             tr(\"allasutust\"),icon = icon(\"home\"),color = \"purple\" )\n  })\n  #teenuste arv üldine\n  output$TeenusteArv <- renderValueBox({\n    TeenusteSum(andmed=andmed, minJah=2, text=tr(\"kaardistatud teenust\"),\n                keel=input$keel)\n  })\n  # plot teenuseid kanalis üldine\n  output$TeenuseidKanalis <- renderPlot({\n    if (input$keel==\"et\") {\n      data <- summeerija2(andmed[andmed$naitaja==\"rahulolu\",], \n                          c(\"kanal\", \"identifikaator\", \"naitaja\"))\n      visualiseerija2(data, aes(x=reorder(kanal, -arv), y=arv),\n                      title=as.character(tr(\"Teenuste arv kanalite lõikes\")),\"\")\n    } else {\n      data <- summeerija2(andmed[andmed$naitaja==\"rahulolu\",], \n                          c(\"kanal_en\", \"identifikaator\", \"naitaja\"))\n      visualiseerija2(data, aes(x=reorder(kanal_en, -arv), y=arv),\n                      title=as.character(tr(\"Teenuste arv kanalite lõikes\")),\"\")\n    }\n  })\n  # plot moodikuid kanali kohta üldine\n  output$Moodikuid <- renderPlot({\n    ########kui joonistab graafikuid, siis kuvab teate\n    ooteTekst()\n    #################################\n    if (input$keel==\"et\") {\n      data <- summeerija(andmed, c(\"naitaja\"))\n      visualiseerija(data, aes(x=reorder(naitaja, -stat_olemas_pr),\n                               y=stat_olemas_pr, label=stat_olemas_tk),\n                     title=as.character(tr(\"Mõõdikutega kanalite osakaal ja arv:\")), \"\")\n    } else {\n      data <- summeerija(andmed, c(\"naitaja_en\"))\n      visualiseerija(data, aes(x=reorder(naitaja_en, -stat_olemas_pr),\n                               y=stat_olemas_pr, label=stat_olemas_tk),\n                     title=as.character(tr(\"Mõõdikutega kanalite osakaal ja arv:\")), \"\")\n    }\n  })\n  #üldine kasutuskordade arv kokku\n  output$Kasutuskordi <- renderValueBox({\n    KasutuskordadeSum(andmed=andmed, minist=input$ministeerium, minJah=2,\n                      text=tr(\"korda kasutati teenuseid\"),keel=input$keel)\n  })\n  #üldine keskmine rahulolu\n  output$Rahulolu <- renderValueBox({\n    KeskmineRahulolu(andmed=andmed, minist=input$ministeerium, minJah=2, \n                     text=tr(\"keskmine rahulolu\"), keel=input$keel)\n  })\n  #üldine teenuste maksumus\n  output$Maksumus <- renderValueBox({\n    HalduskuluSum(andmed=andmed, minist=input$ministeerium, minJah=2,\n                  text=tr(\"teenuste kulu riigile\"), keel=input$keel)\n  })\n  #üldine teenuste ajakulu\n  output$Ajakulu <- renderValueBox({\n    KliendiAjakuluSum(andmed=andmed, minist=input$ministeerium, minJah=2,\n                      text=tr(\"tundi kulutasid kliendid\"), keel=input$keel)\n  })\n  \n  ##########ministeeriumi vaate asjad\n  #ministeeriumite nimekiri dropdowni\n  output$ministeerium <- renderUI({\n    if (input$keel==\"et\") {\n      selectInput(\"ministeerium\", \"\", as.character(unique(andmed$ministeerium)))\n    } else if (input$keel==\"en\") {\n      selectInput(\"ministeerium\", \"\", as.character(unique(andmed$ministeerium_en)))\n    }\n  })\n  #ministeeriumi teenuste arv\n  output$MinTeenusteArv <- renderValueBox({\n    TeenusteSum(andmed=andmed, minist=input$ministeerium, minJah=1,\n                text=tr(\"kaardistatud teenust\"), keel=input$keel)\n  })\n  #asutuste arv ministeeriumi haldusalas\n  output$MinAsutusteArv <- renderValueBox({\n    if (input$keel==\"et\") {\n      valueBox(\n        paste(length(unique(andmed[andmed$ministeerium==input$ministeerium,]$allasutus))), \n        tr(\"allasutust\"),icon = icon(\"home\"),color = \"purple\")\n    } else {\n      valueBox(\n        paste(length(unique(andmed[andmed$ministeerium_en==input$ministeerium,]$allasutus))), \n        tr(\"allasutust\"),icon = icon(\"home\"),color = \"purple\")\n    }\n  })\n  #plot ministeeriumi teenuseid kanali kohta\n  output$TeenuseidKanalisMin <- renderPlot({\n    if (input$keel==\"et\") {\n      data <- summeerija2(andmed[andmed$ministeerium==input$ministeerium&andmed$naitaja==\"rahulolu\",], c(\"kanal\", \"identifikaator\", \"naitaja\"))\n      visualiseerija2(data, aes(x=reorder(kanal, -arv), y=arv),\n                      title=as.character(tr(\"Teenuste arv kanalite lõikes\")),\"\")\n    } else {\n      data <- summeerija2(andmed[andmed$ministeerium_en==input$ministeerium&andmed$naitaja==\"rahulolu\",], c(\"kanal_en\", \"identifikaator\", \"naitaja_en\"))\n      visualiseerija2(data, aes(x=reorder(kanal_en, -arv), y=arv),\n                      title=as.character(tr(\"Teenuste arv kanalite lõikes\")),\"\")\n    }\n  })\n  # plot ministeeriumi moodikuid kanali kohta\n  output$MoodikuidMin <- renderPlot({\n    #     ########kui joonistab graafikuid, siis kuvab teate\n    ooteTekst()\n    #################################\n    if (input$keel==\"et\") {\n      data <- summeerija(andmed[andmed$ministeerium==input$ministeerium,], c(\"naitaja\"))\n      visualiseerija(data, aes(x=reorder(naitaja, -stat_olemas_pr), \n                                    y=stat_olemas_pr, label=stat_olemas_tk),\n                     title=as.character(tr(\"Mõõdikutega kanalite osakaal ja arv:\")), \"\")\n    } else {\n      data <- summeerija(andmed[andmed$ministeerium_en==input$ministeerium,], c(\"naitaja_en\"))\n      visualiseerija(data, aes(x=reorder(naitaja_en, -stat_olemas_pr), \n                               y=stat_olemas_pr, label=stat_olemas_tk),\n                     title=as.character(tr(\"Mõõdikutega kanalite osakaal ja arv:\")), \"\")\n    }\n  })\n  #ministeeriumi kasutuskordade arv kokku\n  output$MinKasutuskordi <- renderValueBox({\n    KasutuskordadeSum(andmed=andmed, minist=input$ministeerium, minJah=1,\n                      text=tr(\"korda kasutati teenuseid\"), keel=input$keel)\n  })\n  #minsteeriumi keskmine rahulolu\n  output$MinRahulolu <- renderValueBox({\n    KeskmineRahulolu(andmed=andmed, minist=input$ministeerium, minJah=1,\n                     text=tr(\"keskmine rahulolu\"), keel=input$keel)\n  })\n  #ministeeriumi teenuste maksumus\n  output$MinMaksumus <- renderValueBox({\n    HalduskuluSum(andmed=andmed, minist=input$ministeerium, minJah=1,\n                  text=tr(\"teenuste kulu riigile\"), keel=input$keel)\n  })\n  #ministeeriumi teenuste ajakulu\n  output$MinAjakulu <- renderValueBox({\n    KliendiAjakuluSum(andmed=andmed, minist=input$ministeerium, minJah=1,\n                      text=tr(\"tundi kulutasid kliendid\"), keel=input$keel)\n  })\n  \n  ############################allasutuste asjad\n  ##interaktiivselt kuvab minnide nimed dropdownis\n  output$ministeerium2 <- renderUI({\n    if (input$keel==\"et\") {\n      selectInput(\"ministeerium2\", \"\", as.character(unique(andmed$ministeerium)))\n    } else if (input$keel==\"en\") {\n      selectInput(\"ministeerium2\", \"\", as.character(unique(andmed$ministeerium_en)))\n    }\n  })\n  ##interaktiivselt kuvab asutuste nimekirja, mis valitud minni all on\n  output$allasutus <- renderUI({\n    if (input$keel==\"et\") {\n      selectInput(\"asutus\", \"\", as.character(unique(andmed[andmed$ministeerium==input$ministeerium2,]$allasutus)))\n    } else {\n      selectInput(\"asutus\", \"\", as.character(unique(andmed[andmed$ministeerium_en==input$ministeerium2,]$allasutus_en)))\n    }\n  })\n  #allasutuse teenuste arv\n  output$AsutTeenusteArv <- renderValueBox({\n    #plot teenuseid kanalis \n    TeenusteSum(andmed=andmed, allasutusnimi =input$asutus, minJah=0,\n                text=tr(\"kaardistatud teenust\"), keel=input$keel)\n  })\n  #plot teenuseid kanalite lõikes\n  output$TeenuseidKanalisAsut <- renderPlot({\n    if (input$keel==\"et\") {\n      data <- summeerija2(andmed[andmed$allasutus==input$asutus&andmed$naitaja==\"rahulolu\",], c(\"kanal\", \"identifikaator\", \"naitaja\"))\n      visualiseerija2(data, aes(x=reorder(kanal, -arv), y=arv),\n                      title=as.character(tr(\"Teenuste arv kanalite lõikes\")),\"\")\n    } else {\n      data <- summeerija2(andmed[andmed$allasutus_en==input$asutus&andmed$naitaja==\"rahulolu\",], c(\"kanal_en\", \"identifikaator\", \"naitaja\"))\n      visualiseerija2(data, aes(x=reorder(kanal_en, -arv), y=arv),\n                      title=as.character(tr(\"Teenuste arv kanalite lõikes\")),\"\")\n    }\n  })\n  # plot asutuse moodikuid kanali kohta\n  output$MoodikuidAsut <- renderPlot({\n    if (input$keel==\"et\") {\n      data <- summeerija(andmed[andmed$allasutus==input$asutus,], c(\"naitaja\"))\n      visualiseerija(data, aes(x=reorder(naitaja, -stat_olemas_pr), \n                               y=stat_olemas_pr, label=stat_olemas_tk),\n                     title=as.character(tr(\"Mõõdikutega kanalite osakaal ja arv:\")), \"\")\n    } else {\n      data <- summeerija(andmed[andmed$allasutus_en==input$asutus,], c(\"naitaja_en\"))\n      visualiseerija(data, aes(x=reorder(naitaja_en,-stat_olemas_pr),\n                               y=stat_olemas_pr, label=stat_olemas_tk),\n                     title=as.character(tr(\"Mõõdikutega kanalite osakaal ja arv:\")), \"\")\n    }\n  })\n  #asutuse kasutuskordade arv kokku\n  output$AsutKasutuskordi <- renderValueBox({\n    KasutuskordadeSum(andmed=andmed, allasutusnimi=input$asutus, minJah=0,\n                      text=tr(\"korda kasutati teenuseid\"), keel=input$keel)\n  })\n  #asutuse keskmine rahulolu\n  output$AsutRahulolu <- renderValueBox({\n    KeskmineRahulolu(andmed=andmed, allasutusnimi=input$asutus, minJah=0,\n                     text=tr(\"keskmine rahulolu\"), keel=input$keel)\n  })\n  #asutuse teenuste maksumus\n  output$AsutMaksumus <- renderValueBox({\n    HalduskuluSum(andmed=andmed, allasutusnimi=input$asutus, minJah=0,\n                  text=tr(\"teenuste kulu riigile\"), keel=input$keel)\n  })\n  #asutuse teenuste ajakulu\n  output$AsutAjakulu <- renderValueBox({\n    #     ########kui joonistab graafikuid, siis kuvab teate\n    ooteTekst()\n    #################################\n    KliendiAjakuluSum(andmed=andmed, allasutusnimi=input$asutus, minJah=0,\n                      text=tr(\"tundi kulutasid kliendid\"), keel=input$keel)\n  })\n  ###########info tabi tõlked\n  output$info1=renderText({\n    as.character(tr(\"info_key1\")) #kuvab ui-s facotrina kui pole as char\n  })\n  output$info2=renderText({\n    as.character(tr(\"info_key2\")) #kuvab ui-s facotrina kui pole as char\n  })\n  output$info3=renderText({\n    as.character(tr(\"info_key3\")) #kuvab ui-s facotrina kui pole as char\n  })\n  ##############\n  \n  #####Tabide min/asutus valikute frame tõlked\n  output$haldusalavalik <- renderText({\n    as.character(tr(\"Haldusala\"))\n  })\n  output$haldusalavalikinfo <- renderText({\n    as.character(tr(\"Vali haldusala\"))\n  })\n  output$asutusevalik <- renderText({\n    as.character(tr(\"Vali allasutus\"))\n  })\n  output$haldusalavalik2 <- renderText({\n    as.character(tr(\"Haldusala\"))\n  })\n  output$haldusalavalikinfo2 <- renderText({\n    as.character(tr(\"Vali haldusala\"))\n  })\n}\n\n\n",
    "created" : 1459515822915.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3938015144",
    "id" : "7456D168",
    "lastKnownWriteTime" : 1461516953,
    "path" : "~/R/Riigiteenused_shinyApp/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}