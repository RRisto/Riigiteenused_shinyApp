#library(jsonlite)
#library(data.table)
andmed=data.table(fromJSON(readLines(url), flatten=T))
andmed=andmed[teenuste_kanalid_ja_moodikud!="list()"]
#"teenuste_kanalid_ja_moodikud", "sihtgrupp", "regulatsioon", muid tekib probleeme
moodik <- rbindlist(lapply(andmed[["teenuste_kanalid_ja_moodikud"]], function(x) {
as.list(unlist(x))
}), fill=TRUE)
andmed[, c(poleVajaVar):=NULL] #kindlasti peab olema eemaldatud:
#salvestamisel, kuna seal on ühes veerus list ja char koos
andmed=cbind(andmed, moodik)
andmed
}
aastad
View(`2014.`)
for (i in 1:length(aastad)) {
assign(aastad, andmed[, !grepl(aastad[i], names(andmed)), with=FALSE]
}
for (i in 1:length(aastad)) {
assign(aastad, andmed[, !grepl(aastad[i], names(andmed)), with=FALSE])
}
for (i in 1:length(aastad)) {
assign(aastad[i], andmed[, !grepl(aastad[i], names(andmed)), with=FALSE])
}
View(empty.)
View(`2014.`)
aastad
SissePikaks=function(url, poleVaja) {
library(data.table)
library(reshape2)
library(jsonlite)
andmed=andmedSisse(url, poleVaja)
andmedLaiEmpty=andmed[, !grepl("2014.", names(andmed)), with=FALSE]
andmedLai2014=andmed[, !grepl("empty.", names(andmed)), with=FALSE]
puhas2014=korrastajaDT(andmedLai2014, "2014.")
puhasEmpty=korrastajaDT(andmedLaiEmpty, "empty.")
andmedPikk=rbind(puhas2014, puhasEmpty)
andmedPikk
}
proov=SissePikaks("https://www.riigiteenused.ee/api/et/all",
poleVaja =c("teenuste_kanalid_ja_moodikud", "sihtgrupp",
"regulatsioon","createdAt", "objectId",
"updatedAt", "keel", "eluarisyndmus", "kirjeldus",
"osakondyksus", "omanikunimi", "omanikuamet",
"omanikutelefon", "omanikuemail", "konfinfo",
"eeltingimus","jareltingimus", "seotuddokumendid",
"muudatustvajav", "aegumisekpv","funktsioon",
"veebiaadress", "seisund", "makse", "teenusetyyp",
"tegevusvaldkond"))
andmed[["ministeerium"]]
proov=andmed
proov[ministeerium:=gsub("i haldusala", "", andmed[["ministeerium]]]
)
))
]]
]
)))))
fefe
efef
efef
efef
library(data.table)
library(reshape2)
library(jsonlite)
proov[, ministeerium:=gsub("i haldusala", "", proov[,ministeerium])]
proov[ministeerium]
proov[,ministeerium]
unique(andmed[,ministeerium])
length(unique(andmed[,ministeerium]))
minist="Justiitsministeerium"
jups=andmed[ministeerium==minist]
jups=proov[ministeerium==minist]
length(unique(andmed[,identifikaator]))
ok=andmed[naitaja=="rahulolu"]
names(andmed)
andmed=SissePikaks("https://www.riigiteenused.ee/api/et/all",
poleVaja =c("teenuste_kanalid_ja_moodikud", "sihtgrupp",
"regulatsioon","createdAt", "objectId",
"updatedAt", "keel", "eluarisyndmus", "kirjeldus",
"osakondyksus", "omanikunimi", "omanikuamet",
"omanikutelefon", "omanikuemail", "konfinfo",
"eeltingimus","jareltingimus", "seotuddokumendid",
"muudatustvajav", "aegumisekpv","funktsioon",
"veebiaadress", "seisund", "makse", "teenusetyyp",
"tegevusvaldkond"))
andmed[, ministeerium:=gsub("i haldusala", "", andmed[,ministeerium])]
names(andemd)
names(andmed
)
ok=andmed[naitaja=="rahulolu"]
View(ok)
summeerija2(andmed[naitaja=="rahulolu"], c("kanal", "identifikaator", "naitaja"))
data <- summeerija2(andmed[naitaja=="rahulolu"], c("kanal", "identifikaator", "naitaja"))
visualiseerija2(data, aes(x=kanal, y=arv),"")
data <- summeerija(andmed, c("naitaja"))
visualiseerija(data, aes(x=naitaja, y=stat_olemas_pr), "")
piiks=andmed[naitaja=="osutamistearv"]
piiks=andmed[naitaja=="osutamistearv"]["value"]
piiks=andmed[naitaja=="osutamistearv", value]
sm(piiks)
sum(piiks)
sum(as.numeric(as.character(piiks)))
sum(as.numeric(as.character(piiks)), na.rm=T)
sum(andmed[naitaja=="osutamistearv", value], na.rm = T)
sum(as.numeric(as.character(andmed[naitaja=="osutamistearv", value]))
piiks=andmed[naitaja=="osutamistearv", value])
sum(as.numeric(as.character(andmed[naitaja=="osutamistearv", value])))
sum(as.numeric(as.character(andmed[naitaja=="osutamistearv", value])), na.rm = T)
mean(
as.numeric(as.character(andmed[naitaja=="osutamistearv",
value])), na.rm = T)
mean(
as.numeric(as.character(andmed[naitaja=="rahulolu",
value])), na.rm = T)
sum(as.numeric(as.character(andmed[naitaja=="halduskulu",
value])), na.rm = T)
as.numeric(as.character(andmed[naitaja=="osutamistearv",value]))
osutamistearv=as.numeric(as.character(andmed[naitaja=="osutamistearv",value]))
ajakulu=as.numeric(as.character(andmed[naitaja=="ajakulu",value]))
sum(ajakulu*osutamistearv)
sum(ajakulu*osutamistearv, na.rm=T)
unique(andmed[,ministeerium])
unique(andmed[ministeerium==input$ministeerium,allasutus]
))
unique(andmed[ministeerium==input$ministeerium,allasutus])
unique(andmed[ministeerium=="Rahandusministeerium",allasutus])
kk=andmed[ministeerium=="Rahandusministeerium"&naitaja=="rahulolu"]
View(kk)
shiny::runApp()
shiny::runApp()
setInternet2(TRUE)
shiny::runApp()
shiny::runApp()
shinyApps::bundleApp
library("shinyAps")
library("shinyApps")
install.packages("shinyApps")
shiny::runApp()
library(RCurl)
content <- getURL("https://www.riigiteenused.ee/api/et/all")
content <- getURL("http://www.riigiteenused.ee/api/et/all")
content
readLines(content)
doc <- htmlParse(content, asText = TRUE)
readLines(getURL("http://www.riigiteenused.ee/api/et/all"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
utils::setInternet2(TRUE)
shiny::runApp()
(url('http://www.systematicportfolio.com/sit.gz', 'rb'))
(url('http://www.riigiteenused.ee/api/et/all', 'r'))
readLines(url('http://www.riigiteenused.ee/api/et/all', 'r'))
shiny::runApp()
shiny::runApp()
shiny::runApp()
save(jun, "http://www.riigiteenused.ee/api/et/all")
jun=NULL
save(jun, "http://www.riigiteenused.ee/api/et/all")
save(jun, file="http://www.riigiteenused.ee/api/et/all")
shiny::runApp()
shiny::runApp()
shiny::runApp()
curl(url = "http://www.riigiteenused.ee/api/et/all", open = "", handle = new_handle())
shiny::runApp()
curl(url = "https://www.riigiteenused.ee/api/et/all", open = "", handle = new_handle())
readLines(curl(url = "https://www.riigiteenused.ee/api/et/all", open = "", handle = new_handle()))
library(httr)
library(RCurl)
shiny::runApp()
set_config( config( ssl.verifypeer = 0L ) )
readLines(curl(url = "https://www.riigiteenused.ee/api/et/all", open = "", handle = new_handle()))
library(httr)
library(curl)
library(Rcurl)
shiny::runApp()
#########Igasugu abifunktsioone
###andmed sisse abifunktsioonid
#tõmbab andmed sisse, eemldab veerud mida pole vaja
andmedSisseDT=function(url, poleVajaVar) {
#poleVajaVar=veerud, mis eemdaldatakse
#loeme andmed sisse
#library(jsonlite)
#library(data.table)
andmed=data.table(fromJSON(readLines(url), flatten=T))
andmed=andmed[teenuste_kanalid_ja_moodikud!="list()"]
#"teenuste_kanalid_ja_moodikud", "sihtgrupp", "regulatsioon", muid tekib probleeme
moodik <- rbindlist(lapply(andmed[["teenuste_kanalid_ja_moodikud"]], function(x) {
as.list(unlist(x))
}), fill=TRUE)
andmed[, c(poleVajaVar):=NULL] #kindlasti peab olema eemaldatud:
#salvestamisel, kuna seal on ühes veerus list ja char koos
andmed=cbind(andmed, moodik)
andmed
}
##meltimine data.tabeliga, teeb laiast pika vormingu, abifunk korrastajale
meltimineDT=function(kanal, data) {
sub=data[,grepl(paste(kanal, "|identifikaator|ministeerium|allasutus", sep=""),
names(data)), with=F]
id=grep(c("identifikaator|ministeerium|allasutus|link"), names(sub), value=T)
if(length(id)<=3) {
tulem=NULL
} else {
#meldime andmed kitsaks
tulem=melt(sub, id=id)
#muudan variable nime ära, mis on kanalispets, muidu ei saa rbindida
lingiNimi=names(tulem)[4]
setnames(tulem, old=lingiNimi, new=c("link"))
}
tulem
}
##teeb laiast pika
korrastajaDT=function(andmed, eemalda) {
#library(reshape2)
#library(data.table)
#eemalda - mis osa columnite nimedest tuleb eemdalda
setnames(andmed, names(andmed), gsub(eemalda, "", names(andmed)))
#kanalite lõikes meldime
veeb=meltimineDT("Veebileht / portaal.", data=andmed)
iseteen=meltimineDT("E-iseteenindus.", data=andmed)
eesti=meltimineDT("Eesti.ee.", data=andmed)
nuti=meltimineDT("Nutirakendus.", data=andmed)
digitv=meltimineDT("Digitelevisioon.", data=andmed)
epost=meltimineDT("E-post.", data=andmed)
sms=meltimineDT("Tekstisõnum.", data=andmed)
telefon=meltimineDT("Telefon.", data=andmed)
faks=meltimineDT("Faks.", data=andmed)
post=meltimineDT("Post.", data=andmed)
lett=meltimineDT("Letiteenus.", data=andmed)
kodus=meltimineDT("Kliendi juures.", data=andmed)
#rbindime
koos=rbindlist(list(veeb, iseteen, eesti, nuti, digitv, epost, sms, telefon, faks,
post, lett, kodus))
#eemaldame kanali ja näitaja ning paneme eraldi veergu
koos[, c("kanal", "naitaja") := tstrsplit(as.character(koos[["variable"]]), "\\.(?=[^\\.]+$)", perl=T)]
#viskame välja tühjad read, kus pole linki
koos=koos[link!="NA"]
koos
}
##kogu eelneva seob üheks funktsiooniks, vaja muuta, kui aastaid tuleb rohkem
SissePikaks=function(url, poleVaja) {
#library(data.table)
#library(reshape2)
#library(jsonlite)
andmed=andmedSisse(url, poleVaja)
andmedLaiEmpty=andmed[, !grepl("2014.", names(andmed)), with=FALSE]
andmedLai2014=andmed[, !grepl("empty.", names(andmed)), with=FALSE]
puhas2014=korrastajaDT(andmedLai2014, "2014.")
puhasEmpty=korrastajaDT(andmedLaiEmpty, "empty.")
andmedPikk=rbind(puhas2014, puhasEmpty)
andmedPikk
}
#############Statistika, graafika funktsioonid
#abifunktsioon andmete summeerimiseks
summeerija=function(data, ...) { #... paned jutumärkidesse variabled mille järgi grupeerida
library(dplyr)
tulem=data %>%
group_by_(...) %>%
summarize(stat_olemas_tk=sum(!is.na(value)),
max_stat=length(value), #ehk kui palju oleks kanali näitaja hulk
stat_olemas_pr=sum(!is.na(value))/length(value))
tulem
}
#ja eelenav funktsiooni andmete visualiseerimiseks (skaala %)
visualiseerija=function(data, mapping, ylab) {
#localenv <- environment()
library(ggplot2)
library(scales)
ggplot(data, mapping)+
geom_bar(stat = "identity", fill="lightblue")+
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust=1, size=13))+
xlab("")+
ylab(ylab)+
coord_cartesian(ylim=c(0,1))+
scale_y_discrete(labels = percent)+
ggtitle("Järgmiste mõõdikuga teenuste osakaal:")
}
#summeerija, ei tooda protsente
summeerija2=function(data, ...) { #... paned jutumärkidesse variabled mille järgi grupeerida
library(dplyr)
tulem=data %>%
group_by_(...) %>%
summarize(arv=n())
tulem
}
#ja eelneva andmete alusel graafiku tegemiseks
visualiseerija2=function(data, mapping, ylab) {
library(ggplot2)
ggplot(data, mapping)+
geom_bar(stat = "identity", fill="lightblue")+
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust=1, size=13))+
xlab("")+
ylab(ylab)+
ggtitle(enc2native("Teenuste arv kanalite lõikes"))
}
#teenuste arv minni/asutuse haldusalas, teeb valueboxi interface
TeenusteSum=function(andmed, minist, allasutus, minJah) {
if (minJah==1) { #kui muu, siis on allasutus
andmed=andmed[ministeerium==minist]
} else if (minJah==2) {
andmed=andmed
} else    {
andmed=andmed[allasutus==allasutus]
}
valueBox(
paste(length(unique(andmed[,identifikaator]))),
"kaardistatud teenust",icon = icon("list-ol"),color = "purple")
}
#kasutuskordade summa arvutamiseks, teeb vale boxi interface
KasutuskordadeSum=function(andmed, minist, allasutus, minJah) {
if (minJah==1) { #kui muu, siis on allasutus
andmed=andmed[ministeerium==minist]
} else if (minJah==2) {
andmed=andmed
}else {
andmed=andmed[allasutus==allasutus]
}
valueBox(
paste(format(sum(as.numeric(as.character(andmed[naitaja=="osutamistearv",
value])), na.rm = T),
big.mark=" ")),
"korda kasutati teenuseid",icon = icon("hand-o-left"),color = "purple")
}
#keskmise rahulolu arvutamiseks, teeb value boxi kohe interfaces
KeskmineRahulolu=function(andmed, minist, allasutus, minJah) {
if (minJah==1) { #kui muu, siis on allasutus
andmed=andmed[ministeerium==minist]
} else if (minJah==2) {
andmed=andmed
}else {
andmed=andmed[allasutus==allasutus]
}
valueBox(
paste(round(
mean(
as.numeric(as.character(andmed[naitaja=="rahulolu",
value])), na.rm = T), 1)),
"% keskmine rahulolu",icon = icon("smile-o"),color = "purple")
}
##asutuste/minni teenuse kogukulu arvutamiseks, teeb valueboxi interface
HalduskuluSum=function(andmed, minist, allasutus, minJah) {
if (minJah==1) { #kui muu, siis on allasutus
andmed=andmed[ministeerium==minist]
} else if (minJah==2) {
andmed=andmed
}else {
andmed=andmed[allasutus==allasutus]
}
valueBox(
paste(
format(
sum(as.numeric(as.character(andmed[naitaja=="halduskulu",
value])), na.rm = T), big.mark=" ")),
"teenuste kulu riigile",icon = icon("euro"),color = "purple")
}
#asutuste/minni klientide ajakulu kokku arvutamiseks, teeb kohe
#valueboxi interface
KliendiAjakuluSum=function(andmed, minist, allasutus, minJah) {
if (minJah==1) { #kui muu, siis on allasutus
andmed=andmed[ministeerium==minist]
} else if (minJah==2) {
andmed=andmed
}else {
andmed=andmed[allasutus==allasutus]
}
osutamistearv=as.numeric(as.character(andmed[naitaja=="osutamistearv",value]))
ajakulu=as.numeric(as.character(andmed[naitaja=="ajakulu",value]))
valueBox(
paste(paste(format(round(sum(ajakulu*osutamistearv ,na.rm=T)), big.mark=" "))),
"tundi kulutasid kliendid teenuste kasutamisele",icon = icon("clock-o"),color = "purple")
}
andmed=SissePikaks(url="http://www.riigiteenused.ee/api/et/all",
poleVaja =c("teenuste_kanalid_ja_moodikud", "sihtgrupp",
"regulatsioon","createdAt", "objectId",
"updatedAt", "keel", "eluarisyndmus", "kirjeldus",
"osakondyksus", "omanikunimi", "omanikuamet",
"omanikutelefon", "omanikuemail", "konfinfo",
"eeltingimus","jareltingimus", "seotuddokumendid",
"muudatustvajav", "aegumisekpv","funktsioon",
"veebiaadress", "seisund", "makse", "teenusetyyp",
"tegevusvaldkond"))
andmed[, ministeerium:=gsub("i haldusala", "", andmed[,ministeerium])]
saeVRDS(andmed, "andmed.rds")
saveRDS(andmed, "andmed.rds")
andmed=readRDS("andmed.rds")
shiny::runApp()
shiny::runApp()
shiny::runApp()
KasutuskordadeSum(andmed=andmed, allasutus="Konkurentsiamet", minJah=0)
shiny::runApp()
data=andmed
shiny::runApp()
shiny::runApp()
shiny::runApp()
summeerija(data, c("naitaja"))
proov=andmed[allasutus=="Lennuamet"]
View(proov)
summeerija(proov, c("naitaja"))
library(dplyr)
tulem=data %>%
group_by_(c("naitaja"))
tulem
summarize(tulem, stat_olemas_tk=sum(!is.na(value)),
max_stat=length(value), #ehk kui palju oleks kanali näitaja hulk
stat_olemas_pr=sum(!is.na(value))/length(value))
sum(is.na(tulem[["value"]]))
sum(is.na(tulem[,value]))
sum(length(tulem[,value]!=na))
sum(length(tulem[,value]!=NA))
sum(length(tulem[,value]==NA))
sum(nrow(tulem[,value]==NA))
sum(nrow(tulem[,value]!=NA))
names(data)
unique(andmed[,value])
sum(nrow(tulem[,value]!=""))
sum(nrow(tulem[,value]==""))
sum(nrow(andmed[,value]==""))
class(andmed[,value])
sum(nrow(as.numeric(as.character(tulem[,value]!=NA))))
sum(nrow(as.numeric(as.character(tulem[,value]==NA))))
sum(length(as.numeric(as.character(tulem[,value]==NA))))
sum(length(as.numeric(as.character(tulem[,value]==""))))
unique(as.numeric(as.charatcer(andmed[,value])))
unique(as.numeric(as.character(andmed[,value])))
sum(length(as.numeric(as.character(tulem[,value])=="")))
sum(length(as.numeric(as.character(tulem[,value])==NA)))
sum(length(as.numeric(as.character(tulem[,value]))==NA))
length(as.numeric(as.character(tulem[,value]))==NA)
length(as.numeric(as.character(tulem[,value]))==NA)
shiny::runApp()
DT
[
,.
(
V4.Sum
=
sum
(
V4
))
,
by
=
V1
]
str(andmed)
andmed[, value]
andmed[, value==""]
andmed[ value==""]
andmed[value:=as.numeric(as.character(andmed[,value]))]
class(anded)
class(andmed)
andmed[,value:=as.numeric(as.character(andmed[,value]))]
sum(andmed[,value])
sum(andmed[,value], na.rm=T)
unique(andmed[ministeerium=="Rahandusministeerium"]$allasutus)
andmed[, value]
class(andmed[, value])
unique(andmed[ministeerium=="Rahandusministeerium", allasutus])
shiny::runApp()
proov=andmed[allasutus=="Konkurentsiamet"]
unique(proov[,allasutus])
osutamistearv=proov[naitaja=="osutamistearv",value]
ajakulu=proov[naitaja=="ajakulu",value]
sum(ajakulu*osutamistearv ,na.rm=T)
shiny::runApp()
shiny::runApp()
shiny::runApp()
andmed[, names(andmed) := lapply(.SD, function(x) {Encoding(x) <- "unknown"; x})]
andmed[, names(andmed) := lapply(.SD, function(x) {Encoding(x) <- "utf-8"; x})]
andmed[, names(andmed) := lapply(.SD, function(x) {Encoding(x) <- "UTF-8"; x})]
shiny::runApp()
shiny::runApp()
fread(andmed.rds", encoding = 'UTF-8')
)
""
fread("andmed.rds", encoding = 'UTF-8')
Encoding(andmed)
Encoding(andmed[,allasutus])
Encoding(andmed[,allasutus])="UTF-8"
Encoding(andmed[,allasutus])
andmed[,allasutus:=Encoding(allasutus)="UTF-8"]
andmed[,allasutus:=(Encoding(allasutus)="UTF-8")]
Encoding(andmed[,allasutus])
andmed[,allasutus:=(Encoding(allasutus)="latin1")]
Encoding(andmed[,allasutus])
andmed[,allasutus]
andmed=data.table(readRDS("andmed.rds"), encoding="UTF-8")
Encoding(andmed[,allasutus])
andmed[,allasutus]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
