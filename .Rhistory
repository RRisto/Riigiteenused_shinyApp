runApp()
andmedLai=andmedSisse()
library(riigiteenused)
andmedLai=andmedSisse()
andmedPikk=andmedPikaks()
andmedPikk=andmedPikaks(andmedLai)
andmedLai[!andmedLai$identifikaator%in%andmedPikk$identifikaator,
"identifikaator"]
lai=jsonlite::fromJSON("https://www.riigiteenused.ee/api/et/all")
lai$identifikaator[lai$teenuste_kanalid_ja_moodikud=="list()"]
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("data.table")
runApp()
runApp()
runApp()
runApp()
library(riigiteenused2)
library(data.table)
andmedLai=riigiteenused2::andmedSisse2()
andmed=andmedPikaks2(andmedLai)
andmed=data.table(andmed)
View(andmed)
as.numeric(andmed$value)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
summeerija=function(data, ...) { #... paned jutumärkidesse variabled mille järgi grupeerida
library(dplyr)
tulem=data %>%
group_by_(...) %>%
summarize(stat_olemas_tk=sum(!is.na(value)),
max_stat=length(value), #ehk kui palju oleks kanali näitaja hulk
stat_olemas_pr=sum(!is.na(value))/length(value))
tulem
}
runApp()
shiny::runApp()
library(riigiteenused)
library(data.table)
andmedLai=riigiteenused::andmedSisse()
andmed=andmedPikaks(andmedLai)
andmed=data.table(andmed)
andmed$value=as.numeric(andmed$value)
andmed[, ministeerium:=gsub("i haldusala", "", andmed[,ministeerium])]
andmed[, ministeerium:=gsub("Riigikantsele", "Riigikantselei", andmed[,ministeerium])]
andmed[, kanal:=gsub("Kliendijuures", "Kliendi juures", andmed[,kanal])]
andmed[, kanal:=gsub("Eesti", "Eesti.ee", andmed[,kanal])]
andmed[, kanal:=gsub("Epost", "E-post", andmed[,kanal])]
andmed[, naitaja:=gsub("osutamistearv", "osutamiste arv", andmed[,naitaja])]
#loen sisse tõlkefailid (fread aitab encodingu probleeme ennetada)
kanali_tolked=fread("./translations/dictionary_channels.csv", encoding = "UTF-8")
naitaja_tolked=fread("./translations/dictionary_moodik.csv", encoding = "UTF-8")
ministeerium_tolked=fread("./translations/dictionary_ministeeriumid.csv", encoding = "UTF-8")
asutused_tolked=fread("./translations/dictionary_asutused.csv", encoding = "UTF-8")
translation=read.csv("./translations/dictionary_ui.csv", sep=";",stringsAsFactors = F)#tõlked interface raami jaoks
#keevitan kanalite, moodikute tõlked juurde, kui siin "andmed" ridade
#arv väheneb, on kuskil keys bugi sees
andmed=merge(andmed, kanali_tolked, by.x="kanal", by.y="key")
andmed=merge(andmed, naitaja_tolked, by.x="naitaja", by.y="key")
andmed=merge(andmed, ministeerium_tolked, by.x="ministeerium", by.y="key")
andmed=merge(andmed, asutused_tolked, by.x="allasutus", by.y="key")
View(andmed)
write.table(andmed, "proov.csv", sep=";", row.names = F)
uniqu(andmedPikk$variable)
unique(andmedPikk$variable)
unique(andmed$naitaja)
andmedLai=riigiteenused::andmedSisse()
andmed=andmedPikaks(andmedLai)
andmed=data.table(andmed)
andmed$value=as.numeric(andmed$value)
unique(andmed$naitaja)
andmed[, ministeerium:=gsub("i haldusala", "", andmed[,ministeerium])]
andmed[, ministeerium:=gsub("Riigikantsele", "Riigikantselei", andmed[,ministeerium])]
andmed[, kanal:=gsub("Kliendijuures", "Kliendi juures", andmed[,kanal])]
andmed[, kanal:=gsub("Eesti", "Eesti.ee", andmed[,kanal])]
andmed[, kanal:=gsub("Epost", "E-post", andmed[,kanal])]
andmed[, naitaja:=gsub("osutamistearv", "osutamiste arv", andmed[,naitaja])]
#loen sisse tõlkefailid (fread aitab encodingu probleeme ennetada)
kanali_tolked=fread("./translations/dictionary_channels.csv", encoding = "UTF-8")
naitaja_tolked=fread("./translations/dictionary_moodik.csv", encoding = "UTF-8")
ministeerium_tolked=fread("./translations/dictionary_ministeeriumid.csv", encoding = "UTF-8")
asutused_tolked=fread("./translations/dictionary_asutused.csv", encoding = "UTF-8")
translation=read.csv("./translations/dictionary_ui.csv", sep=";",stringsAsFactors = F)#tõlked interface raami jaoks
andmedLai=riigiteenused::andmedSisse()
andmed=andmedPikaks(andmedLai)
andmed=data.table(andmed)
andmed$value=as.numeric(andmed$value)
#ümbernimetamine
andmed[, ministeerium:=gsub("i haldusala", "", andmed[,ministeerium])]
andmed[, ministeerium:=gsub("Riigikantsele", "Riigikantselei", andmed[,ministeerium])]
andmed[, kanal:=gsub("Kliendijuures", "Kliendi juures", andmed[,kanal])]
andmed[, kanal:=gsub("Eesti", "Eesti.ee", andmed[,kanal])]
andmed[, kanal:=gsub("Epost", "E-post", andmed[,kanal])]
andmed[, naitaja:=gsub("osutamistearv", "osutamiste arv", andmed[,naitaja])]
kanali_tolked=fread("./translations/dictionary_channels.csv", encoding = "UTF-8")
naitaja_tolked=fread("./translations/dictionary_moodik2.csv", encoding = "UTF-8")
ministeerium_tolked=fread("./translations/dictionary_ministeeriumid.csv", encoding = "UTF-8")
asutused_tolked=fread("./translations/dictionary_asutused.csv", encoding = "UTF-8")
translation=read.csv("./translations/dictionary_ui.csv", sep=";",stringsAsFactors = F)#tõlked interface raami jaoks
View(translation)
andmed=merge(andmed, kanali_tolked, by.x="kanal", by.y="key")
andmed=merge(andmed, naitaja_tolked, by.x="naitaja", by.y="key")
andmed=merge(andmed, ministeerium_tolked, by.x="ministeerium", by.y="key")
andmed=merge(andmed, asutused_tolked, by.x="allasutus", by.y="key")
unique(andmed$naitaja)
andmedLai=riigiteenused::andmedSisse()
andmed=andmedPikaks(andmedLai)
andmed=data.table(andmed)
andmed$value=as.numeric(andmed$value)
#ümbernimetamine
andmed[, ministeerium:=gsub("i haldusala", "", andmed[,ministeerium])]
andmed[, ministeerium:=gsub("Riigikantsele", "Riigikantselei", andmed[,ministeerium])]
andmed[, kanal:=gsub("Kliendijuures", "Kliendi juures", andmed[,kanal])]
andmed[, kanal:=gsub("Eesti", "Eesti.ee", andmed[,kanal])]
andmed[, kanal:=gsub("Epost", "E-post", andmed[,kanal])]
andmed[, naitaja:=gsub("osutamistearv", "osutamiste arv", andmed[,naitaja])]
unique(andmed$kanal)
kanali_tolked=fread("./translations/dictionary_channels.csv", encoding = "UTF-8")
naitaja_tolked=fread("./translations/dictionary_moodik2.csv", encoding = "UTF-8")
ministeerium_tolked=fread("./translations/dictionary_ministeeriumid.csv", encoding = "UTF-8")
asutused_tolked=fread("./translations/dictionary_asutused.csv", encoding = "UTF-8")
translation=read.csv("./translations/dictionary_ui.csv", sep=";",stringsAsFactors = F)#tõlked interface raami jaoks
andmed=merge(andmed, kanali_tolked, by.x="kanal", by.y="key")
proov=unique(andmed$kanal)
andmedLai=riigiteenused::andmedSisse()
andmed=andmedPikaks(andmedLai)
andmed=data.table(andmed)
andmed$value=as.numeric(andmed$value)
#ümbernimetamine
andmed[, ministeerium:=gsub("i haldusala", "", andmed[,ministeerium])]
andmed[, ministeerium:=gsub("Riigikantsele", "Riigikantselei", andmed[,ministeerium])]
andmed[, kanal:=gsub("Kliendijuures", "Kliendi juures", andmed[,kanal])]
andmed[, kanal:=gsub("Eesti", "Eesti.ee", andmed[,kanal])]
andmed[, kanal:=gsub("Epost", "E-post", andmed[,kanal])]
andmed[, naitaja:=gsub("osutamistearv", "osutamiste arv", andmed[,naitaja])]
andmed=merge(andmed, kanali_tolked, by.x="kanal", by.y="key")
proov2=unique(andmed$kanal)
View(andmed)
proov
proov
proov2
proov==proov2
kanali_tolked$key
kanali_tolked$key==proov
for (i in 1:length(proov)):
length(proov)
andmedLai=riigiteenused::andmedSisse()
andmed=andmedPikaks(andmedLai)
andmed=data.table(andmed)
andmed$value=as.numeric(andmed$value)
unique(andmed$kanal)
kanali_tolked=fread("./translations/dictionary_channels2.csv", encoding = "UTF-8")
naitaja_tolked=fread("./translations/dictionary_moodik2.csv", encoding = "UTF-8")
kanali_tolked=fread("./translations/dictionary_channels2.csv", encoding = "UTF-8")
naitaja_tolked=fread("./translations/dictionary_moodik2.csv", encoding = "UTF-8")
ministeerium_tolked=fread("./translations/dictionary_ministeeriumid.csv", encoding = "UTF-8")
asutused_tolked=fread("./translations/dictionary_asutused.csv", encoding = "UTF-8")
translation=read.csv("./translations/dictionary_ui.csv", sep=";",stringsAsFactors = F)#tõlked interface raami jaoks
andmed=merge(andmed, kanali_tolked, by.x="kanal", by.y="key")
andmedLai=riigiteenused::andmedSisse()
andmed=andmedPikaks(andmedLai)
andmed=data.table(andmed)
andmed$value=as.numeric(andmed$value)
#ümbernimetamine
andmed[, ministeerium:=gsub("i haldusala", "", andmed[,ministeerium])]
andmed[, ministeerium:=gsub("Riigikantsele", "Riigikantselei", andmed[,ministeerium])]
#andmed[, kanal:=gsub("Kliendijuures", "Kliendi juures", andmed[,kanal])]
andmed[, kanal:=gsub("Eesti", "Eesti.ee", andmed[,kanal])]
andmed[, kanal:=gsub("Epost", "E-post", andmed[,kanal])]
andmed[, kanal:=gsub("Veebileht / portaal", "Veebileht", andmed[,kanal])]
andmed[, naitaja:=gsub("osutamistearv", "osutamiste arv", andmed[,naitaja])]
kanali_tolked=fread("./translations/dictionary_channels2.csv", encoding = "UTF-8")
naitaja_tolked=fread("./translations/dictionary_moodik2.csv", encoding = "UTF-8")
ministeerium_tolked=fread("./translations/dictionary_ministeeriumid.csv", encoding = "UTF-8")
asutused_tolked=fread("./translations/dictionary_asutused.csv", encoding = "UTF-8")
translation=read.csv("./translations/dictionary_ui.csv", sep=";",stringsAsFactors = F)#tõlked interface raami jaoks
andmed=merge(andmed, kanali_tolked, by.x="kanal", by.y="key")
andmed=merge(andmed, naitaja_tolked, by.x="naitaja", by.y="key")
andmed=merge(andmed, ministeerium_tolked, by.x="ministeerium", by.y="key")
andmed=merge(andmed, asutused_tolked, by.x="allasutus", by.y="key")
andmed=andmedPikaks(andmedLai)
andmed=data.table(andmed)
andmed$value=as.numeric(andmed$value)
#ümbernimetamine
andmed[, ministeerium:=gsub("i haldusala", "", andmed[,ministeerium])]
andmed[, ministeerium:=gsub("Riigikantsele", "Riigikantselei", andmed[,ministeerium])]
#andmed[, kanal:=gsub("Kliendijuures", "Kliendi juures", andmed[,kanal])]
andmed[, kanal:=gsub("Eesti", "Eesti.ee", andmed[,kanal])]
andmed[, kanal:=gsub("Epost", "E-post", andmed[,kanal])]
andmed[, kanal:=gsub("Veebileht / portaal", "Veebileht", andmed[,kanal])]
andmed[, naitaja:=gsub("osutamistearv", "osutamiste arv", andmed[,naitaja])]
#loen sisse tõlkefailid (fread aitab encodingu probleeme ennetada)
kanali_tolked=fread("./translations/dictionary_channels2.csv", encoding = "UTF-8")
naitaja_tolked=fread("./translations/dictionary_moodik2.csv", encoding = "UTF-8")
kanali_tolked=fread("./translations/dictionary_channels2.csv", encoding = "UTF-8")
naitaja_tolked=fread("./translations/dictionary_moodik2.csv", encoding = "UTF-8")
ministeerium_tolked=fread("./translations/dictionary_ministeeriumid.csv", encoding = "UTF-8")
asutused_tolked=fread("./translations/dictionary_asutused.csv", encoding = "UTF-8")
translation=read.csv("./translations/dictionary_ui.csv", sep=";",stringsAsFactors = F)#tõlked interface raami jaoks
andmed=merge(andmed, kanali_tolked, by.x="kanal", by.y="key")
unique(andmed$kanal)
andmed=andmedPikaks(andmedLai)
andmed=data.table(andmed)
andmed$value=as.numeric(andmed$value)
#ümbernimetamine
andmed[, ministeerium:=gsub("i haldusala", "", andmed[,ministeerium])]
andmed[, ministeerium:=gsub("Riigikantsele", "Riigikantselei", andmed[,ministeerium])]
#andmed[, kanal:=gsub("Kliendijuures", "Kliendi juures", andmed[,kanal])]
#andmed[, kanal:=gsub("Eesti", "Eesti.ee", andmed[,kanal])]
andmed[, kanal:=gsub("Epost", "E-post", andmed[,kanal])]
andmed[, kanal:=gsub("Veebileht / portaal", "Veebileht", andmed[,kanal])]
andmed[, naitaja:=gsub("osutamistearv", "osutamiste arv", andmed[,naitaja])]
#loen sisse tõlkefailid (fread aitab encodingu probleeme ennetada)
kanali_tolked=fread("./translations/dictionary_channels2.csv", encoding = "UTF-8")
naitaja_tolked=fread("./translations/dictionary_moodik2.csv", encoding = "UTF-8")
ministeerium_tolked=fread("./translations/dictionary_ministeeriumid.csv", encoding = "UTF-8")
asutused_tolked=fread("./translations/dictionary_asutused.csv", encoding = "UTF-8")
translation=read.csv("./translations/dictionary_ui.csv", sep=";",stringsAsFactors = F)#tõlked interface raami jaoks
#keevitan kanalite, moodikute tõlked juurde, kui siin "andmed" ridade
#arv vähe
andmed=merge(andmed, kanali_tolked, by.x="kanal", by.y="key")
andmed=merge(andmed, naitaja_tolked, by.x="naitaja", by.y="key")
andmed=merge(andmed, ministeerium_tolked, by.x="ministeerium", by.y="key")
andmed=merge(andmed, asutused_tolked, by.x="allasutus", by.y="key")
runApp()
runApp()
andmed=andmedPikaks(andmedLai)
andmed=data.table(andmed)
andmed$value=as.numeric(andmed$value)
#ümbernimetamine
andmed[, ministeerium:=gsub("i haldusala", "", andmed[,ministeerium])]
andmed[, ministeerium:=gsub("Riigikantsele", "Riigikantselei", andmed[,ministeerium])]
#andmed[, kanal:=gsub("Kliendijuures", "Kliendi juures", andmed[,kanal])]
#andmed[, kanal:=gsub("Eesti", "Eesti.ee", andmed[,kanal])]
andmed[, kanal:=gsub("Epost", "E-post", andmed[,kanal])]
andmed[, kanal:=gsub("Veebileht / portaal", "Veebileht", andmed[,kanal])]
andmed[, naitaja:=gsub("osutamistearv", "osutamiste arv", andmed[,naitaja])]
#loen sisse tõlkefailid (fread aitab encodingu probleeme ennetada)
kanali_tolked=fread("./translations/dictionary_channels.csv", encoding = "UTF-8")
naitaja_tolked=fread("./translations/dictionary_moodik.csv", encoding = "UTF-8")
ministeerium_tolked=fread("./translations/dictionary_ministeeriumid.csv", encoding = "UTF-8")
asutused_tolked=fread("./translations/dictionary_asutused.csv", encoding = "UTF-8")
translation=read.csv("./translations/dictionary_ui.csv", sep=";",stringsAsFactors = F)#tõlked interface raami jaoks
#keevitan kanalite, moodikute tõlked juurde, kui siin "andmed" ridade
#arv väheneb, on kuskil keys bugi sees
andmed=merge(andmed, kanali_tolked, by.x="kanal", by.y="key")
andmed=merge(andmed, naitaja_tolked, by.x="naitaja", by.y="key")
andmed=merge(andmed, ministeerium_tolked, by.x="ministeerium", by.y="key")
andmed=merge(andmed, asutused_tolked, by.x="allasutus", by.y="key")
unique(andmed$naitaja)
sum(NA)
sum(NA, na.rm=T)
proovifun=function(andmed, minist, allasutusnimi, minJah, text, keel,
naitaja, ikoon, varv) {
if (keel=="et") {
if (minJah==1) { #kui muu, siis on allasutus
andmed=andmed[andmed$ministeerium==minist,]
} else if (minJah==2) {
andmed=andmed
}else {
#andmed=andmed[andmed$allasutus==allasutus,]
andmed=andmed[allasutus==allasutusnimi]
}
#osutamistearv=andmed[andmed$naitaja=="osutamiste arv",]$value
ajakulu=andmed[andmed$naitaja==naitaja,]$value
valueBox(
paste(paste(format(round(sum(ajakulu ,na.rm=T)), big.mark=" "))),
text,icon = icon(ikoon),color = varv)
} else {
if (minJah==1) { #kui muu, siis on allasutus
andmed=andmed[andmed$ministeerium_en==minist,]
} else if (minJah==2) {
andmed=andmed
}else {
#andmed=andmed[andmed$allasutus==allasutus,]
andmed=andmed[allasutus_en==allasutusnimi]
}
#osutamistearv=andmed[andmed$naitaja=="osutamiste arv",]$value
ajakulu=andmed[andmed$naitaja==naitaja,]$value
valueBox(
paste(paste(format(round(sum(ajakulu ,na.rm=T)), big.mark=" "))),
text,icon = icon(ikoon),color = varv)
}
}
library(shinydashboard)
source("helpers.R")
library(ggplot2)
library(rjson)
library(riigiteenused)
library(curl)
library(data.table)
library(rsconnect)#
proovifun(andmed=andmed, allasutusnimi="Andmekaitse inspektsioon", minJah=0,text=tr("tundi kulutasid kliendid"), keel="et", naitaja="ajakulu", ikoon="clock-o", vav="purple")
proovifun(andmed=andmed, allasutusnimi="Andmekaitse inspektsioon", minJah=0,text=tr("tundi kulutasid kliendid"), keel="et", naitaja="ajakulu", ikoon="clock-o", varv="purple")
proovifun(andmed=andmed, allasutusnimi="Andmekaitse inspektsioon", minJah=0,text="tundi kulutasid kliendid", keel="et", naitaja="ajakulu", ikoon="clock-o", varv="purple")
runApp()
runApp()
proov=andmed[andmed$allasutus="Andmekaitse Inspektsioon",]$value
proov=andmed[andmed$allasutus=="Andmekaitse Inspektsioon",]$value
sum(proov, na.rm=T)
proov=andmed[andmed$allasutus=="Andmekaitse Inspektsioon"&andmed$naitaja=="ajakulu",]$value
sum(proov)
sum(proov, na.rm=T)
runApp()
runApp()
naitaja="ajakulu"
ajakulu=andmed[andmed$naitaja==naitaja, "value"]
View(ajakulu)
paste(paste(format(round(sum(ajakulu ,na.rm=T)), big.mark=" ")))
allasutusnimi="Andmekaitse Inspektsioon"
andmed=andmed[allasutus==allasutusnimi]
ajakulu=andmed[andmed$naitaja==naitaja, "value"]
View(ajakulu)
class(ajakulu)
sum(ajakulu)
sum(ajakulu, na.rm=T)
ajakulu=andmed[andmed$naitaja==naitaja]
View(ajakulu)
ajakulu=andmed[andmed$naitaja==naitaja, value]
runApp()
runApp()
andmed=andmedPikaks(andmedLai)
andmed=data.table(andmed)
andmed$value=as.numeric(andmed$value)
#ümbernimetamine
andmed[, ministeerium:=gsub("i haldusala", "", andmed[,ministeerium])]
andmed[, ministeerium:=gsub("Riigikantsele", "Riigikantselei", andmed[,ministeerium])]
#andmed[, kanal:=gsub("Kliendijuures", "Kliendi juures", andmed[,kanal])]
#andmed[, kanal:=gsub("Eesti", "Eesti.ee", andmed[,kanal])]
andmed[, kanal:=gsub("Epost", "E-post", andmed[,kanal])]
andmed[, kanal:=gsub("Veebileht / portaal", "Veebileht", andmed[,kanal])]
andmed[, naitaja:=gsub("osutamistearv", "osutamiste arv", andmed[,naitaja])]
#loen sisse tõlkefailid (fread aitab encodingu probleeme ennetada)
kanali_tolked=fread("./translations/dictionary_channels.csv", encoding = "UTF-8")
naitaja_tolked=fread("./translations/dictionary_moodik.csv", encoding = "UTF-8")
ministeerium_tolked=fread("./translations/dictionary_ministeeriumid.csv", encoding = "UTF-8")
asutused_tolked=fread("./translations/dictionary_asutused.csv", encoding = "UTF-8")
translation=read.csv("./translations/dictionary_ui.csv", sep=";",stringsAsFactors = F)#tõlked interface raami jaoks
#keevitan kanalite, moodikute tõlked juurde, kui siin "andmed" ridade
#arv väheneb, on kuskil keys bugi sees
andmed=merge(andmed, kanali_tolked, by.x="kanal", by.y="key")
andmed=merge(andmed, naitaja_tolked, by.x="naitaja", by.y="key")
andmed=merge(andmed, ministeerium_tolked, by.x="ministeerium", by.y="key")
andmed=merge(andmed, asutused_tolked, by.x="allasutus", by.y="key")
andmed=andmed[allasutus==allasutusnimi]
View(andmed)
ajakulu=andmed[naitaja==naitaja, value]
naitaja
ajakulu=andmed[naitaja=="ajakulu", value]
runApp()
runApp()
proov=c(1,2,3)
mean(proov)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(riigiteenused)
andmedLai=riigiteenused::andmedSisse()
andmed=andmedPikaks(andmedLai)
library(data.table)
andmed=data.table(andme)
andmed=data.table(andmed)
length(unique(andmed$identifikaator))
write.table(andmed, "proov.csv", sep=";", row.names = F)
runApp()
library(riigiteenused)
library(data.table)
andmedLai=riigiteenused::andmedSisse()
andmed=andmedPikaks(andmedLai)
andmed=data.table(andmed)
andmed$value=as.numeric(andmed$value)
andmed[, ministeerium:=gsub("i haldusala", "", andmed[,ministeerium])]
andmed[, ministeerium:=gsub("Riigikantsele", "Riigikantselei", andmed[,ministeerium])]
#andmed[, kanal:=gsub("Kliendijuures", "Kliendi juures", andmed[,kanal])]
#andmed[, kanal:=gsub("Eesti", "Eesti.ee", andmed[,kanal])]
andmed[, kanal:=gsub("Epost", "E-post", andmed[,kanal])]
andmed[, kanal:=gsub("Veebileht / portaal", "Veebileht", andmed[,kanal])]
andmed[, naitaja:=gsub("osutamistearv", "osutamiste arv", andmed[,naitaja])]
andmed[, naitaja:=gsub("ajakuluBruto", "ajakulu (bruto)", andmed[,naitaja])]
kanali_tolked=fread("./translations/dictionary_channels.csv", encoding = "UTF-8")
naitaja_tolked=fread("./translations/dictionary_moodik.csv", encoding = "UTF-8")
ministeerium_tolked=fread("./translations/dictionary_ministeeriumid.csv", encoding = "UTF-8")
asutused_tolked=fread("./translations/dictionary_asutused.csv", encoding = "UTF-8")
translation=read.csv("./translations/dictionary_ui.csv", sep=";",stringsAsFactors = F)#tõlked interface raami jaoks
andmed=merge(andmed, kanali_tolked, by.x="kanal", by.y="key")
andmed=merge(andmed, naitaja_tolked, by.x="naitaja", by.y="key")
andmed=merge(andmed, ministeerium_tolked, by.x="ministeerium", by.y="key")
andmed=merge(andmed, asutused_tolked, by.x="allasutus", by.y="key")
andmedLai=riigiteenused::andmedSisse()
andmed=andmedPikaks(andmedLai)
andmed=data.table(andmed)
andmed$value=as.numeric(andmed$value)
#ümbernimetamine
andmed[, ministeerium:=gsub("i haldusala", "", andmed[,ministeerium])]
andmed[, ministeerium:=gsub("Riigikantsele", "Riigikantselei", andmed[,ministeerium])]
#andmed[, kanal:=gsub("Kliendijuures", "Kliendi juures", andmed[,kanal])]
#andmed[, kanal:=gsub("Eesti", "Eesti.ee", andmed[,kanal])]
andmed[, kanal:=gsub("Epost", "E-post", andmed[,kanal])]
andmed[, kanal:=gsub("Veebileht / portaal", "Veebileht", andmed[,kanal])]
andmed[, naitaja:=gsub("osutamistearv", "osutamiste arv", andmed[,naitaja])]
andmed[, naitaja:=gsub("ajakuluBruto", "ajakulu (bruto)", andmed[,naitaja])]
#loe
andmed=merge(andmed, kanali_tolked, by.x="kanal", by.y="key")
andmedLai=riigiteenused::andmedSisse()
andmed=andmedPikaks(andmedLai)
andmed=data.table(andmed)
andmed$value=as.numeric(andmed$value)
length(unique(andmed$identifikaator))
andmed[, ministeerium:=gsub("i haldusala", "", andmed[,ministeerium])]
andmed[, ministeerium:=gsub("Riigikantsele", "Riigikantselei", andmed[,ministeerium])]
#andmed[, kanal:=gsub("Kliendijuures", "Kliendi juures", andmed[,kanal])]
#andmed[, kanal:=gsub("Eesti", "Eesti.ee", andmed[,kanal])]
andmed[, kanal:=gsub("Epost", "E-post", andmed[,kanal])]
andmed[, kanal:=gsub("Veebileht / portaal", "Veebileht", andmed[,kanal])]
andmed[, naitaja:=gsub("osutamistearv", "osutamiste arv", andmed[,naitaja])]
andmed[, naitaja:=gsub("ajakuluBruto", "ajakulu (bruto)", andmed[,naitaja])]
unique(andmed$kanal)
andmed[andmed$kanal=="Website/ homepage"]
andmedLai=riigiteenused::andmedSisse()
andmed=andmedPikaks(andmedLai)
andmed=data.table(andmed)
andmed$value=as.numeric(andmed$value)
#ümbernimetamine
andmed[, ministeerium:=gsub("i haldusala", "", andmed[,ministeerium])]
andmed[, ministeerium:=gsub("Riigikantsele", "Riigikantselei", andmed[,ministeerium])]
#andmed[, kanal:=gsub("Kliendijuures", "Kliendi juures", andmed[,kanal])]
#andmed[, kanal:=gsub("Eesti", "Eesti.ee", andmed[,kanal])]
andmed[, kanal:=gsub("Epost", "E-post", andmed[,kanal])]
andmed[, kanal:=gsub("Veebileht / portaal", "Veebileht", andmed[,kanal])]
andmed[, naitaja:=gsub("osutamistearv", "osutamiste arv", andmed[,naitaja])]
andmed[, naitaja:=gsub("ajakuluBruto", "ajakulu (bruto)", andmed[,naitaja])]
unique(andmed$kanal)
runApp()
andmedLai[andmedLai$identifier=="MKM-044"]
andmedLai[andmedLai$identifier=="MKM-044",]
proov=andmedLai[andmedLai$identifier=="MKM-044",]
andmedLai=proov
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
keel="et"
minJah=2
if (keel=="et") {
if (minJah==1) { #kui muu, siis on allasutus
andmed=andmed[andmed$ministeerium==minist,]
} else if (minJah==2) {
andmed=andmed
}else {
andmed=andmed[allasutus==allasutusnimi]
}
} else {
if (minJah==1) { #kui muu, siis on allasutus
andmed=andmed[andmed$ministeerium_en==minist,]
} else if (minJah==2) {
andmed=andmed
}else {
andmed=andmed[allasutus_en==allasutusnimi]
}
}
teenusteSum=T
runApp()
unique(andmed$naitaja)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
