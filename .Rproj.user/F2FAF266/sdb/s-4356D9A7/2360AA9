{
    "contents" : "#########Igasugu abifunktsioone\n\n#abifunktsioon andmete summeerimiseks\nsummeerija=function(data, ...) { #... paned jutumärkidesse variabled mille järgi grupeerida\n  library(dplyr)\n  tulem=data %>%\n    group_by_(...) %>%\n    summarize(stat_olemas_tk=sum(!is.na(value)),\n              max_stat=length(value), #ehk kui palju oleks kanali näitaja hulk\n              stat_olemas_pr=sum(!is.na(value))/length(value)) \n  tulem\n}\n\n#ja eelenav funktsiooni andmete visualiseerimiseks (skaala %)\nvisualiseerija=function(data, mapping, ylab) {\n  #localenv <- environment()\n  library(ggplot2)\n  library(scales)\n  ggplot(data, mapping)+\n    geom_bar(stat = \"identity\", fill=\"lightblue\")+\n    theme_minimal()+\n    theme(axis.text.x = element_text(angle = 45, hjust=1, size=13))+\n    xlab(\"\")+\n    ylab(ylab)+\n    coord_cartesian(ylim=c(0,1))+\n    scale_y_discrete(labels = percent)+\n    ggtitle(\"Järgmiste mõõdikuga teenuste osakaal:\")\n}\n\n# visualiseerija=function(data, mapping, ylab) {\n#   #localenv <- environment()\n#   #library(ggplot2)\n#   library(scales)\n#   #library(plotly)\n#   ggplot(data, mapping)+\n#     geom_bar(stat = \"identity\", fill=\"lightblue\")+\n#     theme_minimal()+\n#     theme(axis.text.x = element_text(angle = 45, hjust=1, size=13))+\n#     xlab(\"\")+\n#     ylab(ylab)+\n#     coord_cartesian(ylim=c(0,1))+\n#     scale_y_discrete(labels = percent)+\n#     ggtitle(\"Järgmiste mõõdikuga teenuste osakaal:\")\n#   \n# }\n\n#summeerija, ei tooda protsente\nsummeerija2=function(data, ...) { #... paned jutumärkidesse variabled mille järgi grupeerida\n  library(dplyr)\n  tulem=data %>%\n    group_by_(...) %>%\n    summarize(arv=n()) \n  tulem\n}\n#ja eelneva andmete alusel graafiku tegemiseks\nvisualiseerija2=function(data, mapping, ylab) {\n  library(ggplot2)\n  ggplot(data, mapping)+\n    geom_bar(stat = \"identity\", fill=\"lightblue\")+\n    theme_minimal()+\n    theme(axis.text.x = element_text(angle = 45, hjust=1, size=13))+\n    xlab(\"\")+\n    ylab(ylab)+\n    ggtitle(enc2native(\"Teenuste arv kanalite lõikes\"))\n}\n#teenuste arv minni/asutuse haldusalas, teeb valueboxi interface\nTeenusteSum=function(andmed, minist, allasutus, minJah) {\n  if (minJah==1) { #kui muu, siis on allasutus\n    andmed=andmed[andmed$ministeerium==minist,]\n  } else if (minJah==2) {\n    andmed=andmed\n  } else    {\n    andmed=andmed[andmed$allasutus==allasutus,]\n  }\n  valueBox(\n    paste(length(unique(andmed$identifikaator))), \n    \"kaardistatud teenust\",icon = icon(\"list-ol\"),color = \"purple\")\n}\n\n#kasutuskordade summa arvutamiseks, teeb vale boxi interface\nKasutuskordadeSum=function(andmed, minist, allasutus, minJah) {\n  if (minJah==1) { #kui muu, siis on allasutus\n    andmed=andmed[andmed$ministeerium==minist,]\n  } else if (minJah==2) {\n    andmed=andmed\n  }else {\n    andmed=andmed[andmed$allasutus==allasutus,]\n  }\n  valueBox(\n    paste(format(sum(andmed[andmed$naitaja==\"osutamistearv\",]$value, na.rm = T), big.mark=\" \")), \n    \"korda kasutati teenuseid\",icon = icon(\"hand-o-left\"),color = \"purple\")\n}\n\n#keskmise rahulolu arvutamiseks, teeb value boxi kohe interfaces\nKeskmineRahulolu=function(andmed, minist, allasutus, minJah) {\n  if (minJah==1) { #kui muu, siis on allasutus\n    andmed=andmed[andmed$ministeerium==minist,]\n  } else if (minJah==2) {\n    andmed=andmed\n  }else {\n    andmed=andmed[andmed$allasutus==allasutus,]\n  }\n  valueBox(\n    paste(round(\n      mean(\n        andmed[andmed$naitaja==\"rahulolu\",]$value, na.rm = T), 1)), \n    \"% keskmine rahulolu\",icon = icon(\"smile-o\"),color = \"purple\")\n}\n\n##asutuste/minni teenuse kogukulu arvutamiseks, teeb valueboxi interface\nHalduskuluSum=function(andmed, minist, allasutus, minJah) {\n  if (minJah==1) { #kui muu, siis on allasutus\n    andmed=andmed[andmed$ministeerium==minist,]\n  } else if (minJah==2) {\n    andmed=andmed\n  }else {\n    andmed=andmed[andmed$allasutus==allasutus,]\n  }\n  valueBox(\n    paste(\n      format(\n        sum(andmed[andmed$naitaja==\"halduskulu\",]$value, na.rm = T), big.mark=\" \")), \n    \"teenuste kulu riigile\",icon = icon(\"euro\"),color = \"purple\")\n}\n\n#asutuste/minni klientide ajakulu kokku arvutamiseks, teeb kohe\n#valueboxi interface\nKliendiAjakuluSum=function(andmed, minist, allasutus, minJah) {\n  if (minJah==1) { #kui muu, siis on allasutus\n    andmed=andmed[andmed$ministeerium==minist,]\n  } else if (minJah==2) {\n    andmed=andmed\n  }else {\n    andmed=andmed[andmed$allasutus==allasutus,]\n  }\n  osutamistearv=andmed[andmed$naitaja==\"osutamistearv\",]$value\n  ajakulu=andmed[andmed$naitaja==\"ajakulu\",]$value\n  valueBox(\n    paste(paste(format(round(sum(ajakulu*osutamistearv ,na.rm=T)), big.mark=\" \"))), \n    \"tundi kulutasid kliendid teenuste kasutamisele\",icon = icon(\"clock-o\"),color = \"purple\")\n}\n\n###############funktsioonid andmete sisse lugemiseks ja pikaks tegemiseks\nmeltimine=function(kanal, data) {\n  library(reshape2)\n  #leiame ainult seda kanalit puudutavad muutujad\n  sub=data[, grepl(paste(kanal, \"|identifikaator|ministeerium|allasutus|tegevusvaldkond|teenusetyyp|makse\", sep=\"\"), names(data))]\n  #määran id-d, mis meltimisel meltimata jäävad\n  id=grep(c(\"identifikaator|ministeerium|allasutus|tegevusvaldkond|teenusetyyp|makse|link\"), names(sub), value=T)\n  #kui selle kanali kohta stati pole, anna vastuseks null\n  if(length(id)<7) {\n    tulem=NULL\n  } else {\n    #meldime andmed kitsaks\n    tulem=melt(sub, id=id)\n    #muudan variable nime ära, mis on kanalispets, muidu ei saa rbindida\n    names(tulem)=c(\"identifikaator\", \"tegevusvaldkond\", \"tyyp\", \"ministeerium\", \"allasutus\",  \n                   \"makse\", \"link\",  \"variable\",           \n                   \"value\")\n  }\n  tulem\n}\n\n#abifunktsioon andmete sisse lugemiseks\nkorrastaja=function(andmed, eemalda) {\n  library(reshape2)\n  #eemalda - mis osa columnite nimedest tuleb eemdalda\n  names(andmed)=gsub(pattern=eemalda,\"\" ,names(andmed))\n  #kanalite lõikes meldime\n  veeb=meltimine(\"Veebileht / portaal.\", data=andmed)\n  iseteen=meltimine(\"E-iseteenindus.\", data=andmed)\n  eesti=meltimine(\"Eesti.ee.\", data=andmed)\n  nuti=meltimine(\"Nutirakendus.\", data=andmed)\n  digitv=meltimine(\"Digitelevisioon.\", data=andmed)\n  epost=meltimine(\"E-post.\", data=andmed)\n  #sms=meltimine(\"Tekstisõnum.\", data=andmed)\n  sms=meltimine(\"Tekstis\\u00F5num.\", data=andmed) #shiny jaoks vaja\n  telefon=meltimine(\"Telefon.\", data=andmed)\n  faks=meltimine(\"Faks.\", data=andmed)\n  post=meltimine(\"Post.\", data=andmed)\n  #lett=meltimine(\"Letiteenus büroos.\", data=andmed) #võib muutuda! vaja ka gsubi siis lisada\n  lett=meltimine(\"Letiteenus b\\u00FCroos.\", data=andmed) #shiny jaoks vaja\n  kodus=meltimine(\"Kliendi juures.\", data=andmed)\n  #rbindime\n  koos=rbind(veeb, iseteen, eesti, nuti, digitv, epost, sms, telefon, faks, \n             post, lett, kodus)\n  #leiame kanali ja näitaja\n  #kanal <- strsplit(as.character(koos$variable), split =\"\\\\.\\\\w{1,}$\")\n  #stati saamiseks eemaldame punktid kanali nimedest\n  koos$variable=gsub(\".ee.\", \".\", as.character(koos$variable), fixed=T)\n  koos$variable=gsub(\"Letiteenus b\\u00FCroos\", \"Letiteenus\", as.character(koos$variable), fixed=T)\n  koos$variable=gsub(\"E-iseteenindus\", \"Eiseteenindus\", as.character(koos$variable), fixed=T)\n  koos$variable=gsub(\"E-post\", \"Epost\", as.character(koos$variable), fixed=T)\n  koos$variable=gsub(\"Veebileht / portaal\", \"Veebileht\", as.character(koos$variable), fixed=T)\n  stat=gsub(\"Kliendi juures\", \"Kliendijuures\", as.character(koos$variable), fixed=T)\n  \n  #lõikame punktini asja maha\n  stat <- strsplit(stat, split =\"\\\\.\")\n  #teeme df-ks\n  df=as.data.frame(stat)\n  #transponeerime\n  df=as.data.frame(t(df))\n  #lisame algsesse andmestikku\n  koos$kanal=df[,2]\n  koos$naitaja=df[,3]\n  #viskame välja tühjad read, kus pole linki\n # koos=koos[!is.na(koos$link),]\n  koos$value=as.numeric(as.character(koos$value))\n  koos\n} \n#andmete download\nandmedSisse=function() {\n  #loeme andmed sisse\n  library(jsonlite)\n  library(data.table)\n  andmed=fromJSON(readLines(\"https://www.riigiteenused.ee/api/et/all\"), flatten=T)\n  andmed=andmed[\"teenuste_kanalid_ja_moodikud\"!=\"list()\"]\n  andmedMoodik <- rbindlist(lapply(andmed[[\"teenuste_kanalid_ja_moodikud\"]], function(x) {\n    as.list(unlist(x))\n  }), fill=TRUE)\n  \n  andmed\n}\n\n#andmed pikaks\nDataLong2=function(andmedLai) {\n  vars=names(andmedLai) %in% c(\"regulatsioon\", \"objectId\", \"eluarisyndmus\", \"kirjeldus\", \n                               \"eeltingimus\", \"jareltingimus\", \"createdAt\", \n                               \"updatedAt\", \"keel\", \"osakondyksus\", \"omanikunimi\", \n                               \"omanikutelefon\",\"omanikuemail\", \n                               \"konfinfo\", \"seotuddokumendid\", \"seisund\", \n                               \"muudatustvajav\", \"aegumisekpv\", \"funktsioon\", \n                               \"veebiaadress\")\n  #eemaldame muutujad\n  andmedLai=andmedLai[,!vars]\n  #aastate põhjal teeme andmed 2-ks (kui aastaid rohkem siis vastavalt sellele\n  #arv muutub)\n  andmedLai2014=andmedLai[, !grepl(\"empty.|2011.\", names(andmedLai))]\n  andmedLai2011=andmedLai[, !grepl(\"empty.|2014.\", names(andmedLai))]\n  andmedLaiEmpty=andmedLai[, !grepl(\"2014.|2011.\", names(andmedLai))]\n  puhas2014=korrastaja(andmedLai2014, \"2014.\")\n  puhasEmpty=korrastaja(andmedLaiEmpty, \"empty.\")\n  puhas2011=korrastaja(andmedLai2011, \"2011.\")\n  #paneme andme kokku\n  andmedPikk=rbind(puhas2014, puhas2011,puhasEmpty)\n  andmedPikk\n}\n ",
    "created" : 1448807180257.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "774426113",
    "id" : "2360AA9",
    "lastKnownWriteTime" : 1451456690,
    "path" : "~/R/Riigiteenused_shiny/helpers.R",
    "project_path" : "helpers.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}